/* automatically generated by rust-bindgen 0.71.1 */

pub const _VI_ERROR: i32 = -2147483648;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const VI_SUCCESS: u32 = 0;
pub const VI_NULL: u32 = 0;
pub const VI_TRUE: u32 = 1;
pub const VI_FALSE: u32 = 0;
pub const VI_SPEC_VERSION: u32 = 7340032;
pub const VI_ATTR_RSRC_CLASS: u32 = 3221159937;
pub const VI_ATTR_RSRC_NAME: u32 = 3221159938;
pub const VI_ATTR_RSRC_IMPL_VERSION: u32 = 1073676291;
pub const VI_ATTR_RSRC_LOCK_STATE: u32 = 1073676292;
pub const VI_ATTR_MAX_QUEUE_LENGTH: u32 = 1073676293;
pub const VI_ATTR_USER_DATA_32: u32 = 1073676295;
pub const VI_ATTR_FDC_CHNL: u32 = 1073676301;
pub const VI_ATTR_FDC_MODE: u32 = 1073676303;
pub const VI_ATTR_FDC_GEN_SIGNAL_EN: u32 = 1073676305;
pub const VI_ATTR_FDC_USE_PAIR: u32 = 1073676307;
pub const VI_ATTR_SEND_END_EN: u32 = 1073676310;
pub const VI_ATTR_TERMCHAR: u32 = 1073676312;
pub const VI_ATTR_TMO_VALUE: u32 = 1073676314;
pub const VI_ATTR_GPIB_READDR_EN: u32 = 1073676315;
pub const VI_ATTR_IO_PROT: u32 = 1073676316;
pub const VI_ATTR_DMA_ALLOW_EN: u32 = 1073676318;
pub const VI_ATTR_ASRL_BAUD: u32 = 1073676321;
pub const VI_ATTR_ASRL_DATA_BITS: u32 = 1073676322;
pub const VI_ATTR_ASRL_PARITY: u32 = 1073676323;
pub const VI_ATTR_ASRL_STOP_BITS: u32 = 1073676324;
pub const VI_ATTR_ASRL_FLOW_CNTRL: u32 = 1073676325;
pub const VI_ATTR_RD_BUF_OPER_MODE: u32 = 1073676330;
pub const VI_ATTR_RD_BUF_SIZE: u32 = 1073676331;
pub const VI_ATTR_WR_BUF_OPER_MODE: u32 = 1073676333;
pub const VI_ATTR_WR_BUF_SIZE: u32 = 1073676334;
pub const VI_ATTR_SUPPRESS_END_EN: u32 = 1073676342;
pub const VI_ATTR_TERMCHAR_EN: u32 = 1073676344;
pub const VI_ATTR_DEST_ACCESS_PRIV: u32 = 1073676345;
pub const VI_ATTR_DEST_BYTE_ORDER: u32 = 1073676346;
pub const VI_ATTR_SRC_ACCESS_PRIV: u32 = 1073676348;
pub const VI_ATTR_SRC_BYTE_ORDER: u32 = 1073676349;
pub const VI_ATTR_SRC_INCREMENT: u32 = 1073676352;
pub const VI_ATTR_DEST_INCREMENT: u32 = 1073676353;
pub const VI_ATTR_WIN_ACCESS_PRIV: u32 = 1073676357;
pub const VI_ATTR_WIN_BYTE_ORDER: u32 = 1073676359;
pub const VI_ATTR_GPIB_ATN_STATE: u32 = 1073676375;
pub const VI_ATTR_GPIB_ADDR_STATE: u32 = 1073676380;
pub const VI_ATTR_GPIB_CIC_STATE: u32 = 1073676382;
pub const VI_ATTR_GPIB_NDAC_STATE: u32 = 1073676386;
pub const VI_ATTR_GPIB_SRQ_STATE: u32 = 1073676391;
pub const VI_ATTR_GPIB_SYS_CNTRL_STATE: u32 = 1073676392;
pub const VI_ATTR_GPIB_HS488_CBL_LEN: u32 = 1073676393;
pub const VI_ATTR_CMDR_LA: u32 = 1073676395;
pub const VI_ATTR_VXI_DEV_CLASS: u32 = 1073676396;
pub const VI_ATTR_MAINFRAME_LA: u32 = 1073676400;
pub const VI_ATTR_MANF_NAME: u32 = 3221160050;
pub const VI_ATTR_MODEL_NAME: u32 = 3221160055;
pub const VI_ATTR_VXI_VME_INTR_STATUS: u32 = 1073676427;
pub const VI_ATTR_VXI_TRIG_STATUS: u32 = 1073676429;
pub const VI_ATTR_VXI_VME_SYSFAIL_STATE: u32 = 1073676436;
pub const VI_ATTR_WIN_BASE_ADDR_32: u32 = 1073676440;
pub const VI_ATTR_WIN_SIZE_32: u32 = 1073676442;
pub const VI_ATTR_ASRL_AVAIL_NUM: u32 = 1073676460;
pub const VI_ATTR_MEM_BASE_32: u32 = 1073676461;
pub const VI_ATTR_ASRL_CTS_STATE: u32 = 1073676462;
pub const VI_ATTR_ASRL_DCD_STATE: u32 = 1073676463;
pub const VI_ATTR_ASRL_DSR_STATE: u32 = 1073676465;
pub const VI_ATTR_ASRL_DTR_STATE: u32 = 1073676466;
pub const VI_ATTR_ASRL_END_IN: u32 = 1073676467;
pub const VI_ATTR_ASRL_END_OUT: u32 = 1073676468;
pub const VI_ATTR_ASRL_REPLACE_CHAR: u32 = 1073676478;
pub const VI_ATTR_ASRL_RI_STATE: u32 = 1073676479;
pub const VI_ATTR_ASRL_RTS_STATE: u32 = 1073676480;
pub const VI_ATTR_ASRL_XON_CHAR: u32 = 1073676481;
pub const VI_ATTR_ASRL_XOFF_CHAR: u32 = 1073676482;
pub const VI_ATTR_WIN_ACCESS: u32 = 1073676483;
pub const VI_ATTR_RM_SESSION: u32 = 1073676484;
pub const VI_ATTR_VXI_LA: u32 = 1073676501;
pub const VI_ATTR_MANF_ID: u32 = 1073676505;
pub const VI_ATTR_MEM_SIZE_32: u32 = 1073676509;
pub const VI_ATTR_MEM_SPACE: u32 = 1073676510;
pub const VI_ATTR_MODEL_CODE: u32 = 1073676511;
pub const VI_ATTR_SLOT: u32 = 1073676520;
pub const VI_ATTR_INTF_INST_NAME: u32 = 3221160169;
pub const VI_ATTR_IMMEDIATE_SERV: u32 = 1073676544;
pub const VI_ATTR_INTF_PARENT_NUM: u32 = 1073676545;
pub const VI_ATTR_RSRC_SPEC_VERSION: u32 = 1073676656;
pub const VI_ATTR_INTF_TYPE: u32 = 1073676657;
pub const VI_ATTR_GPIB_PRIMARY_ADDR: u32 = 1073676658;
pub const VI_ATTR_GPIB_SECONDARY_ADDR: u32 = 1073676659;
pub const VI_ATTR_RSRC_MANF_NAME: u32 = 3221160308;
pub const VI_ATTR_RSRC_MANF_ID: u32 = 1073676661;
pub const VI_ATTR_INTF_NUM: u32 = 1073676662;
pub const VI_ATTR_TRIG_ID: u32 = 1073676663;
pub const VI_ATTR_GPIB_REN_STATE: u32 = 1073676673;
pub const VI_ATTR_GPIB_UNADDR_EN: u32 = 1073676676;
pub const VI_ATTR_DEV_STATUS_BYTE: u32 = 1073676681;
pub const VI_ATTR_FILE_APPEND_EN: u32 = 1073676690;
pub const VI_ATTR_VXI_TRIG_SUPPORT: u32 = 1073676692;
pub const VI_ATTR_TCPIP_ADDR: u32 = 3221160341;
pub const VI_ATTR_TCPIP_HOSTNAME: u32 = 3221160342;
pub const VI_ATTR_TCPIP_PORT: u32 = 1073676695;
pub const VI_ATTR_TCPIP_DEVICE_NAME: u32 = 3221160345;
pub const VI_ATTR_TCPIP_NODELAY: u32 = 1073676698;
pub const VI_ATTR_TCPIP_KEEPALIVE: u32 = 1073676699;
pub const VI_ATTR_4882_COMPLIANT: u32 = 1073676703;
pub const VI_ATTR_USB_SERIAL_NUM: u32 = 3221160352;
pub const VI_ATTR_USB_INTFC_NUM: u32 = 1073676705;
pub const VI_ATTR_USB_PROTOCOL: u32 = 1073676711;
pub const VI_ATTR_USB_MAX_INTR_SIZE: u32 = 1073676719;
pub const VI_ATTR_PXI_DEV_NUM: u32 = 1073676801;
pub const VI_ATTR_PXI_FUNC_NUM: u32 = 1073676802;
pub const VI_ATTR_PXI_BUS_NUM: u32 = 1073676805;
pub const VI_ATTR_PXI_CHASSIS: u32 = 1073676806;
pub const VI_ATTR_PXI_SLOTPATH: u32 = 3221160455;
pub const VI_ATTR_PXI_SLOT_LBUS_LEFT: u32 = 1073676808;
pub const VI_ATTR_PXI_SLOT_LBUS_RIGHT: u32 = 1073676809;
pub const VI_ATTR_PXI_TRIG_BUS: u32 = 1073676810;
pub const VI_ATTR_PXI_STAR_TRIG_BUS: u32 = 1073676811;
pub const VI_ATTR_PXI_STAR_TRIG_LINE: u32 = 1073676812;
pub const VI_ATTR_PXI_SRC_TRIG_BUS: u32 = 1073676813;
pub const VI_ATTR_PXI_DEST_TRIG_BUS: u32 = 1073676814;
pub const VI_ATTR_PXI_MEM_TYPE_BAR0: u32 = 1073676817;
pub const VI_ATTR_PXI_MEM_TYPE_BAR1: u32 = 1073676818;
pub const VI_ATTR_PXI_MEM_TYPE_BAR2: u32 = 1073676819;
pub const VI_ATTR_PXI_MEM_TYPE_BAR3: u32 = 1073676820;
pub const VI_ATTR_PXI_MEM_TYPE_BAR4: u32 = 1073676821;
pub const VI_ATTR_PXI_MEM_TYPE_BAR5: u32 = 1073676822;
pub const VI_ATTR_PXI_MEM_BASE_BAR0_32: u32 = 1073676833;
pub const VI_ATTR_PXI_MEM_BASE_BAR1_32: u32 = 1073676834;
pub const VI_ATTR_PXI_MEM_BASE_BAR2_32: u32 = 1073676835;
pub const VI_ATTR_PXI_MEM_BASE_BAR3_32: u32 = 1073676836;
pub const VI_ATTR_PXI_MEM_BASE_BAR4_32: u32 = 1073676837;
pub const VI_ATTR_PXI_MEM_BASE_BAR5_32: u32 = 1073676838;
pub const VI_ATTR_PXI_MEM_BASE_BAR0_64: u32 = 1073676840;
pub const VI_ATTR_PXI_MEM_BASE_BAR1_64: u32 = 1073676841;
pub const VI_ATTR_PXI_MEM_BASE_BAR2_64: u32 = 1073676842;
pub const VI_ATTR_PXI_MEM_BASE_BAR3_64: u32 = 1073676843;
pub const VI_ATTR_PXI_MEM_BASE_BAR4_64: u32 = 1073676844;
pub const VI_ATTR_PXI_MEM_BASE_BAR5_64: u32 = 1073676845;
pub const VI_ATTR_PXI_MEM_SIZE_BAR0_32: u32 = 1073676849;
pub const VI_ATTR_PXI_MEM_SIZE_BAR1_32: u32 = 1073676850;
pub const VI_ATTR_PXI_MEM_SIZE_BAR2_32: u32 = 1073676851;
pub const VI_ATTR_PXI_MEM_SIZE_BAR3_32: u32 = 1073676852;
pub const VI_ATTR_PXI_MEM_SIZE_BAR4_32: u32 = 1073676853;
pub const VI_ATTR_PXI_MEM_SIZE_BAR5_32: u32 = 1073676854;
pub const VI_ATTR_PXI_MEM_SIZE_BAR0_64: u32 = 1073676856;
pub const VI_ATTR_PXI_MEM_SIZE_BAR1_64: u32 = 1073676857;
pub const VI_ATTR_PXI_MEM_SIZE_BAR2_64: u32 = 1073676858;
pub const VI_ATTR_PXI_MEM_SIZE_BAR3_64: u32 = 1073676859;
pub const VI_ATTR_PXI_MEM_SIZE_BAR4_64: u32 = 1073676860;
pub const VI_ATTR_PXI_MEM_SIZE_BAR5_64: u32 = 1073676861;
pub const VI_ATTR_PXI_IS_EXPRESS: u32 = 1073676864;
pub const VI_ATTR_PXI_SLOT_LWIDTH: u32 = 1073676865;
pub const VI_ATTR_PXI_MAX_LWIDTH: u32 = 1073676866;
pub const VI_ATTR_PXI_ACTUAL_LWIDTH: u32 = 1073676867;
pub const VI_ATTR_PXI_DSTAR_BUS: u32 = 1073676868;
pub const VI_ATTR_PXI_DSTAR_SET: u32 = 1073676869;
pub const VI_ATTR_PXI_ALLOW_WRITE_COMBINE: u32 = 1073676870;
pub const VI_ATTR_PXI_SLOT_WIDTH: u32 = 1073676871;
pub const VI_ATTR_PXI_SLOT_OFFSET: u32 = 1073676872;
pub const VI_ATTR_TCPIP_SERVER_CERT_ISSUER_NAME: u32 = 3221160560;
pub const VI_ATTR_TCPIP_SERVER_CERT_SUBJECT_NAME: u32 = 3221160561;
pub const VI_ATTR_TCPIP_SERVER_CERT_EXPIRATION_DATE: u32 = 3221160562;
pub const VI_ATTR_TCPIP_SERVER_CERT_IS_PERPETUAL: u32 = 1073676915;
pub const VI_ATTR_TCPIP_SASL_MECHANISM: u32 = 3221160564;
pub const VI_ATTR_TCPIP_TLS_CIPHER_SUITE: u32 = 3221160565;
pub const VI_ATTR_TCPIP_SERVER_CERT: u32 = 3221160566;
pub const VI_ATTR_TCPIP_SERVER_CERT_SIZE: u32 = 1073676919;
pub const VI_ATTR_TCPIP_HISLIP_OVERLAP_EN: u32 = 1073677056;
pub const VI_ATTR_TCPIP_HISLIP_VERSION: u32 = 1073677057;
pub const VI_ATTR_TCPIP_HISLIP_MAX_MESSAGE_KB: u32 = 1073677058;
pub const VI_ATTR_TCPIP_IS_HISLIP: u32 = 1073677059;
pub const VI_ATTR_TCPIP_HISLIP_ENCRYPTION_EN: u32 = 1073677060;
pub const VI_ATTR_JOB_ID: u32 = 1073692678;
pub const VI_ATTR_EVENT_TYPE: u32 = 1073692688;
pub const VI_ATTR_SIGP_STATUS_ID: u32 = 1073692689;
pub const VI_ATTR_RECV_TRIG_ID: u32 = 1073692690;
pub const VI_ATTR_INTR_STATUS_ID: u32 = 1073692707;
pub const VI_ATTR_STATUS: u32 = 1073692709;
pub const VI_ATTR_RET_COUNT_32: u32 = 1073692710;
pub const VI_ATTR_BUFFER: u32 = 1073692711;
pub const VI_ATTR_RECV_INTR_LEVEL: u32 = 1073692737;
pub const VI_ATTR_OPER_NAME: u32 = 3221176386;
pub const VI_ATTR_GPIB_RECV_CIC_STATE: u32 = 1073693075;
pub const VI_ATTR_RECV_TCPIP_ADDR: u32 = 3221176728;
pub const VI_ATTR_USB_RECV_INTR_SIZE: u32 = 1073693104;
pub const VI_ATTR_USB_RECV_INTR_DATA: u32 = 3221176753;
pub const VI_ATTR_PXI_RECV_INTR_SEQ: u32 = 1073693248;
pub const VI_ATTR_PXI_RECV_INTR_DATA: u32 = 1073693249;
pub const VI_ATTR_USER_DATA_64: u32 = 1073676298;
pub const VI_ATTR_RET_COUNT_64: u32 = 1073692712;
pub const VI_ATTR_USER_DATA: u32 = 1073676298;
pub const VI_ATTR_RET_COUNT: u32 = 1073692712;
pub const VI_ATTR_WIN_BASE_ADDR_64: u32 = 1073676443;
pub const VI_ATTR_WIN_SIZE_64: u32 = 1073676444;
pub const VI_ATTR_MEM_BASE_64: u32 = 1073676496;
pub const VI_ATTR_MEM_SIZE_64: u32 = 1073676497;
pub const VI_ATTR_WIN_BASE_ADDR: u32 = 1073676443;
pub const VI_ATTR_WIN_SIZE: u32 = 1073676444;
pub const VI_ATTR_MEM_BASE: u32 = 1073676496;
pub const VI_ATTR_MEM_SIZE: u32 = 1073676497;
pub const VI_ATTR_PXI_MEM_BASE_BAR0: u32 = 1073676840;
pub const VI_ATTR_PXI_MEM_BASE_BAR1: u32 = 1073676841;
pub const VI_ATTR_PXI_MEM_BASE_BAR2: u32 = 1073676842;
pub const VI_ATTR_PXI_MEM_BASE_BAR3: u32 = 1073676843;
pub const VI_ATTR_PXI_MEM_BASE_BAR4: u32 = 1073676844;
pub const VI_ATTR_PXI_MEM_BASE_BAR5: u32 = 1073676845;
pub const VI_ATTR_PXI_MEM_SIZE_BAR0: u32 = 1073676856;
pub const VI_ATTR_PXI_MEM_SIZE_BAR1: u32 = 1073676857;
pub const VI_ATTR_PXI_MEM_SIZE_BAR2: u32 = 1073676858;
pub const VI_ATTR_PXI_MEM_SIZE_BAR3: u32 = 1073676859;
pub const VI_ATTR_PXI_MEM_SIZE_BAR4: u32 = 1073676860;
pub const VI_ATTR_PXI_MEM_SIZE_BAR5: u32 = 1073676861;
pub const VI_EVENT_IO_COMPLETION: u32 = 1073684489;
pub const VI_EVENT_TRIG: u32 = 3221168138;
pub const VI_EVENT_SERVICE_REQ: u32 = 1073684491;
pub const VI_EVENT_CLEAR: u32 = 1073684493;
pub const VI_EVENT_EXCEPTION: u32 = 3221168142;
pub const VI_EVENT_GPIB_CIC: u32 = 1073684498;
pub const VI_EVENT_GPIB_TALK: u32 = 1073684499;
pub const VI_EVENT_GPIB_LISTEN: u32 = 1073684500;
pub const VI_EVENT_VXI_VME_SYSFAIL: u32 = 1073684509;
pub const VI_EVENT_VXI_VME_SYSRESET: u32 = 1073684510;
pub const VI_EVENT_VXI_SIGP: u32 = 1073684512;
pub const VI_EVENT_VXI_VME_INTR: u32 = 3221168161;
pub const VI_EVENT_PXI_INTR: u32 = 1073684514;
pub const VI_EVENT_TCPIP_CONNECT: u32 = 1073684534;
pub const VI_EVENT_USB_INTR: u32 = 1073684535;
pub const VI_ALL_ENABLED_EVENTS: u32 = 1073709055;
pub const VI_SUCCESS_EVENT_EN: u32 = 1073676290;
pub const VI_SUCCESS_EVENT_DIS: u32 = 1073676291;
pub const VI_SUCCESS_QUEUE_EMPTY: u32 = 1073676292;
pub const VI_SUCCESS_TERM_CHAR: u32 = 1073676293;
pub const VI_SUCCESS_MAX_CNT: u32 = 1073676294;
pub const VI_SUCCESS_DEV_NPRESENT: u32 = 1073676413;
pub const VI_SUCCESS_TRIG_MAPPED: u32 = 1073676414;
pub const VI_SUCCESS_QUEUE_NEMPTY: u32 = 1073676416;
pub const VI_SUCCESS_NCHAIN: u32 = 1073676440;
pub const VI_SUCCESS_NESTED_SHARED: u32 = 1073676441;
pub const VI_SUCCESS_NESTED_EXCLUSIVE: u32 = 1073676442;
pub const VI_SUCCESS_SYNC: u32 = 1073676443;
pub const VI_WARN_QUEUE_OVERFLOW: u32 = 1073676300;
pub const VI_WARN_CONFIG_NLOADED: u32 = 1073676407;
pub const VI_WARN_NULL_OBJECT: u32 = 1073676418;
pub const VI_WARN_NSUP_ATTR_STATE: u32 = 1073676420;
pub const VI_WARN_UNKNOWN_STATUS: u32 = 1073676421;
pub const VI_WARN_NSUP_BUF: u32 = 1073676424;
pub const VI_WARN_EXT_FUNC_NIMPL: u32 = 1073676457;
pub const VI_WARN_SERVER_CERT_UNTRUSTED: u32 = 1073676528;
pub const VI_WARN_SERVER_CERT_INV_SUBJECT: u32 = 1073676529;
pub const VI_ERROR_SYSTEM_ERROR: i32 = -1073807360;
pub const VI_ERROR_INV_OBJECT: i32 = -1073807346;
pub const VI_ERROR_RSRC_LOCKED: i32 = -1073807345;
pub const VI_ERROR_INV_EXPR: i32 = -1073807344;
pub const VI_ERROR_RSRC_NFOUND: i32 = -1073807343;
pub const VI_ERROR_INV_RSRC_NAME: i32 = -1073807342;
pub const VI_ERROR_INV_ACC_MODE: i32 = -1073807341;
pub const VI_ERROR_TMO: i32 = -1073807339;
pub const VI_ERROR_CLOSING_FAILED: i32 = -1073807338;
pub const VI_ERROR_INV_DEGREE: i32 = -1073807333;
pub const VI_ERROR_INV_JOB_ID: i32 = -1073807332;
pub const VI_ERROR_NSUP_ATTR: i32 = -1073807331;
pub const VI_ERROR_NSUP_ATTR_STATE: i32 = -1073807330;
pub const VI_ERROR_ATTR_READONLY: i32 = -1073807329;
pub const VI_ERROR_INV_LOCK_TYPE: i32 = -1073807328;
pub const VI_ERROR_INV_ACCESS_KEY: i32 = -1073807327;
pub const VI_ERROR_INV_EVENT: i32 = -1073807322;
pub const VI_ERROR_INV_MECH: i32 = -1073807321;
pub const VI_ERROR_HNDLR_NINSTALLED: i32 = -1073807320;
pub const VI_ERROR_INV_HNDLR_REF: i32 = -1073807319;
pub const VI_ERROR_INV_CONTEXT: i32 = -1073807318;
pub const VI_ERROR_QUEUE_OVERFLOW: i32 = -1073807315;
pub const VI_ERROR_NENABLED: i32 = -1073807313;
pub const VI_ERROR_ABORT: i32 = -1073807312;
pub const VI_ERROR_RAW_WR_PROT_VIOL: i32 = -1073807308;
pub const VI_ERROR_RAW_RD_PROT_VIOL: i32 = -1073807307;
pub const VI_ERROR_OUTP_PROT_VIOL: i32 = -1073807306;
pub const VI_ERROR_INP_PROT_VIOL: i32 = -1073807305;
pub const VI_ERROR_BERR: i32 = -1073807304;
pub const VI_ERROR_IN_PROGRESS: i32 = -1073807303;
pub const VI_ERROR_INV_SETUP: i32 = -1073807302;
pub const VI_ERROR_QUEUE_ERROR: i32 = -1073807301;
pub const VI_ERROR_ALLOC: i32 = -1073807300;
pub const VI_ERROR_INV_MASK: i32 = -1073807299;
pub const VI_ERROR_IO: i32 = -1073807298;
pub const VI_ERROR_INV_FMT: i32 = -1073807297;
pub const VI_ERROR_NSUP_FMT: i32 = -1073807295;
pub const VI_ERROR_LINE_IN_USE: i32 = -1073807294;
pub const VI_ERROR_LINE_NRESERVED: i32 = -1073807293;
pub const VI_ERROR_NSUP_MODE: i32 = -1073807290;
pub const VI_ERROR_SRQ_NOCCURRED: i32 = -1073807286;
pub const VI_ERROR_INV_SPACE: i32 = -1073807282;
pub const VI_ERROR_INV_OFFSET: i32 = -1073807279;
pub const VI_ERROR_INV_WIDTH: i32 = -1073807278;
pub const VI_ERROR_NSUP_OFFSET: i32 = -1073807276;
pub const VI_ERROR_NSUP_VAR_WIDTH: i32 = -1073807275;
pub const VI_ERROR_WINDOW_NMAPPED: i32 = -1073807273;
pub const VI_ERROR_RESP_PENDING: i32 = -1073807271;
pub const VI_ERROR_NLISTENERS: i32 = -1073807265;
pub const VI_ERROR_NCIC: i32 = -1073807264;
pub const VI_ERROR_NSYS_CNTLR: i32 = -1073807263;
pub const VI_ERROR_NSUP_OPER: i32 = -1073807257;
pub const VI_ERROR_INTR_PENDING: i32 = -1073807256;
pub const VI_ERROR_ASRL_PARITY: i32 = -1073807254;
pub const VI_ERROR_ASRL_FRAMING: i32 = -1073807253;
pub const VI_ERROR_ASRL_OVERRUN: i32 = -1073807252;
pub const VI_ERROR_TRIG_NMAPPED: i32 = -1073807250;
pub const VI_ERROR_NSUP_ALIGN_OFFSET: i32 = -1073807248;
pub const VI_ERROR_USER_BUF: i32 = -1073807247;
pub const VI_ERROR_RSRC_BUSY: i32 = -1073807246;
pub const VI_ERROR_NSUP_WIDTH: i32 = -1073807242;
pub const VI_ERROR_INV_PARAMETER: i32 = -1073807240;
pub const VI_ERROR_INV_PROT: i32 = -1073807239;
pub const VI_ERROR_INV_SIZE: i32 = -1073807237;
pub const VI_ERROR_WINDOW_MAPPED: i32 = -1073807232;
pub const VI_ERROR_NIMPL_OPER: i32 = -1073807231;
pub const VI_ERROR_INV_LENGTH: i32 = -1073807229;
pub const VI_ERROR_INV_MODE: i32 = -1073807215;
pub const VI_ERROR_SESN_NLOCKED: i32 = -1073807204;
pub const VI_ERROR_MEM_NSHARED: i32 = -1073807203;
pub const VI_ERROR_LIBRARY_NFOUND: i32 = -1073807202;
pub const VI_ERROR_NSUP_INTR: i32 = -1073807201;
pub const VI_ERROR_INV_LINE: i32 = -1073807200;
pub const VI_ERROR_FILE_ACCESS: i32 = -1073807199;
pub const VI_ERROR_FILE_IO: i32 = -1073807198;
pub const VI_ERROR_NSUP_LINE: i32 = -1073807197;
pub const VI_ERROR_NSUP_MECH: i32 = -1073807196;
pub const VI_ERROR_INTF_NUM_NCONFIG: i32 = -1073807195;
pub const VI_ERROR_CONN_LOST: i32 = -1073807194;
pub const VI_ERROR_MACHINE_NAVAIL: i32 = -1073807193;
pub const VI_ERROR_NPERMISSION: i32 = -1073807192;
pub const VI_ERROR_SERVER_CERT: i32 = -1073807184;
pub const VI_ERROR_SERVER_CERT_UNTRUSTED: i32 = -1073807183;
pub const VI_ERROR_SERVER_CERT_EXPIRED: i32 = -1073807182;
pub const VI_ERROR_SERVER_CERT_REVOKED: i32 = -1073807181;
pub const VI_ERROR_SERVER_CERT_INV_SUBJECT: i32 = -1073807180;
pub const VI_FIND_BUFLEN: u32 = 256;
pub const VI_INTF_GPIB: u32 = 1;
pub const VI_INTF_VXI: u32 = 2;
pub const VI_INTF_GPIB_VXI: u32 = 3;
pub const VI_INTF_ASRL: u32 = 4;
pub const VI_INTF_PXI: u32 = 5;
pub const VI_INTF_TCPIP: u32 = 6;
pub const VI_INTF_USB: u32 = 7;
pub const VI_PROT_NORMAL: u32 = 1;
pub const VI_PROT_FDC: u32 = 2;
pub const VI_PROT_HS488: u32 = 3;
pub const VI_PROT_4882_STRS: u32 = 4;
pub const VI_PROT_USBTMC_VENDOR: u32 = 5;
pub const VI_FDC_NORMAL: u32 = 1;
pub const VI_FDC_STREAM: u32 = 2;
pub const VI_LOCAL_SPACE: u32 = 0;
pub const VI_A16_SPACE: u32 = 1;
pub const VI_A24_SPACE: u32 = 2;
pub const VI_A32_SPACE: u32 = 3;
pub const VI_A64_SPACE: u32 = 4;
pub const VI_PXI_ALLOC_SPACE: u32 = 9;
pub const VI_PXI_CFG_SPACE: u32 = 10;
pub const VI_PXI_BAR0_SPACE: u32 = 11;
pub const VI_PXI_BAR1_SPACE: u32 = 12;
pub const VI_PXI_BAR2_SPACE: u32 = 13;
pub const VI_PXI_BAR3_SPACE: u32 = 14;
pub const VI_PXI_BAR4_SPACE: u32 = 15;
pub const VI_PXI_BAR5_SPACE: u32 = 16;
pub const VI_OPAQUE_SPACE: u32 = 65535;
pub const VI_UNKNOWN_LA: i32 = -1;
pub const VI_UNKNOWN_SLOT: i32 = -1;
pub const VI_UNKNOWN_LEVEL: i32 = -1;
pub const VI_UNKNOWN_CHASSIS: i32 = -1;
pub const VI_QUEUE: u32 = 1;
pub const VI_HNDLR: u32 = 2;
pub const VI_SUSPEND_HNDLR: u32 = 4;
pub const VI_ALL_MECH: u32 = 65535;
pub const VI_ANY_HNDLR: u32 = 0;
pub const VI_TRIG_ALL: i32 = -2;
pub const VI_TRIG_SW: i32 = -1;
pub const VI_TRIG_TTL0: u32 = 0;
pub const VI_TRIG_TTL1: u32 = 1;
pub const VI_TRIG_TTL2: u32 = 2;
pub const VI_TRIG_TTL3: u32 = 3;
pub const VI_TRIG_TTL4: u32 = 4;
pub const VI_TRIG_TTL5: u32 = 5;
pub const VI_TRIG_TTL6: u32 = 6;
pub const VI_TRIG_TTL7: u32 = 7;
pub const VI_TRIG_ECL0: u32 = 8;
pub const VI_TRIG_ECL1: u32 = 9;
pub const VI_TRIG_ECL2: u32 = 10;
pub const VI_TRIG_ECL3: u32 = 11;
pub const VI_TRIG_ECL4: u32 = 12;
pub const VI_TRIG_ECL5: u32 = 13;
pub const VI_TRIG_STAR_SLOT1: u32 = 14;
pub const VI_TRIG_STAR_SLOT2: u32 = 15;
pub const VI_TRIG_STAR_SLOT3: u32 = 16;
pub const VI_TRIG_STAR_SLOT4: u32 = 17;
pub const VI_TRIG_STAR_SLOT5: u32 = 18;
pub const VI_TRIG_STAR_SLOT6: u32 = 19;
pub const VI_TRIG_STAR_SLOT7: u32 = 20;
pub const VI_TRIG_STAR_SLOT8: u32 = 21;
pub const VI_TRIG_STAR_SLOT9: u32 = 22;
pub const VI_TRIG_STAR_SLOT10: u32 = 23;
pub const VI_TRIG_STAR_SLOT11: u32 = 24;
pub const VI_TRIG_STAR_SLOT12: u32 = 25;
pub const VI_TRIG_STAR_INSTR: u32 = 26;
pub const VI_TRIG_PANEL_IN: u32 = 27;
pub const VI_TRIG_PANEL_OUT: u32 = 28;
pub const VI_TRIG_STAR_VXI0: u32 = 29;
pub const VI_TRIG_STAR_VXI1: u32 = 30;
pub const VI_TRIG_STAR_VXI2: u32 = 31;
pub const VI_TRIG_TTL8: u32 = 32;
pub const VI_TRIG_TTL9: u32 = 33;
pub const VI_TRIG_TTL10: u32 = 34;
pub const VI_TRIG_TTL11: u32 = 35;
pub const VI_TRIG_PROT_DEFAULT: u32 = 0;
pub const VI_TRIG_PROT_ON: u32 = 1;
pub const VI_TRIG_PROT_OFF: u32 = 2;
pub const VI_TRIG_PROT_SYNC: u32 = 5;
pub const VI_TRIG_PROT_RESERVE: u32 = 6;
pub const VI_TRIG_PROT_UNRESERVE: u32 = 7;
pub const VI_READ_BUF: u32 = 1;
pub const VI_WRITE_BUF: u32 = 2;
pub const VI_READ_BUF_DISCARD: u32 = 4;
pub const VI_WRITE_BUF_DISCARD: u32 = 8;
pub const VI_IO_IN_BUF: u32 = 16;
pub const VI_IO_OUT_BUF: u32 = 32;
pub const VI_IO_IN_BUF_DISCARD: u32 = 64;
pub const VI_IO_OUT_BUF_DISCARD: u32 = 128;
pub const VI_FLUSH_ON_ACCESS: u32 = 1;
pub const VI_FLUSH_WHEN_FULL: u32 = 2;
pub const VI_FLUSH_DISABLE: u32 = 3;
pub const VI_NMAPPED: u32 = 1;
pub const VI_USE_OPERS: u32 = 2;
pub const VI_DEREF_ADDR: u32 = 3;
pub const VI_DEREF_ADDR_BYTE_SWAP: u32 = 4;
pub const VI_TMO_IMMEDIATE: u32 = 0;
pub const VI_TMO_INFINITE: u32 = 4294967295;
pub const VI_NO_LOCK: u32 = 0;
pub const VI_EXCLUSIVE_LOCK: u32 = 1;
pub const VI_SHARED_LOCK: u32 = 2;
pub const VI_LOAD_CONFIG: u32 = 4;
pub const VI_NO_SEC_ADDR: u32 = 65535;
pub const VI_ASRL_PAR_NONE: u32 = 0;
pub const VI_ASRL_PAR_ODD: u32 = 1;
pub const VI_ASRL_PAR_EVEN: u32 = 2;
pub const VI_ASRL_PAR_MARK: u32 = 3;
pub const VI_ASRL_PAR_SPACE: u32 = 4;
pub const VI_ASRL_STOP_ONE: u32 = 10;
pub const VI_ASRL_STOP_ONE5: u32 = 15;
pub const VI_ASRL_STOP_TWO: u32 = 20;
pub const VI_ASRL_FLOW_NONE: u32 = 0;
pub const VI_ASRL_FLOW_XON_XOFF: u32 = 1;
pub const VI_ASRL_FLOW_RTS_CTS: u32 = 2;
pub const VI_ASRL_FLOW_DTR_DSR: u32 = 4;
pub const VI_ASRL_END_NONE: u32 = 0;
pub const VI_ASRL_END_LAST_BIT: u32 = 1;
pub const VI_ASRL_END_TERMCHAR: u32 = 2;
pub const VI_ASRL_END_BREAK: u32 = 3;
pub const VI_STATE_ASSERTED: u32 = 1;
pub const VI_STATE_UNASSERTED: u32 = 0;
pub const VI_STATE_UNKNOWN: i32 = -1;
pub const VI_BIG_ENDIAN: u32 = 0;
pub const VI_LITTLE_ENDIAN: u32 = 1;
pub const VI_DATA_PRIV: u32 = 0;
pub const VI_DATA_NPRIV: u32 = 1;
pub const VI_PROG_PRIV: u32 = 2;
pub const VI_PROG_NPRIV: u32 = 3;
pub const VI_BLCK_PRIV: u32 = 4;
pub const VI_BLCK_NPRIV: u32 = 5;
pub const VI_D64_PRIV: u32 = 6;
pub const VI_D64_NPRIV: u32 = 7;
pub const VI_D64_2EVME: u32 = 8;
pub const VI_D64_SST160: u32 = 9;
pub const VI_D64_SST267: u32 = 10;
pub const VI_D64_SST320: u32 = 11;
pub const VI_WIDTH_8: u32 = 1;
pub const VI_WIDTH_16: u32 = 2;
pub const VI_WIDTH_32: u32 = 4;
pub const VI_WIDTH_64: u32 = 8;
pub const VI_GPIB_REN_DEASSERT: u32 = 0;
pub const VI_GPIB_REN_ASSERT: u32 = 1;
pub const VI_GPIB_REN_DEASSERT_GTL: u32 = 2;
pub const VI_GPIB_REN_ASSERT_ADDRESS: u32 = 3;
pub const VI_GPIB_REN_ASSERT_LLO: u32 = 4;
pub const VI_GPIB_REN_ASSERT_ADDRESS_LLO: u32 = 5;
pub const VI_GPIB_REN_ADDRESS_GTL: u32 = 6;
pub const VI_GPIB_ATN_DEASSERT: u32 = 0;
pub const VI_GPIB_ATN_ASSERT: u32 = 1;
pub const VI_GPIB_ATN_DEASSERT_HANDSHAKE: u32 = 2;
pub const VI_GPIB_ATN_ASSERT_IMMEDIATE: u32 = 3;
pub const VI_GPIB_HS488_DISABLED: u32 = 0;
pub const VI_GPIB_HS488_NIMPL: i32 = -1;
pub const VI_GPIB_UNADDRESSED: u32 = 0;
pub const VI_GPIB_TALKER: u32 = 1;
pub const VI_GPIB_LISTENER: u32 = 2;
pub const VI_VXI_CMD16: u32 = 512;
pub const VI_VXI_CMD16_RESP16: u32 = 514;
pub const VI_VXI_RESP16: u32 = 2;
pub const VI_VXI_CMD32: u32 = 1024;
pub const VI_VXI_CMD32_RESP16: u32 = 1026;
pub const VI_VXI_CMD32_RESP32: u32 = 1028;
pub const VI_VXI_RESP32: u32 = 4;
pub const VI_ASSERT_SIGNAL: i32 = -1;
pub const VI_ASSERT_USE_ASSIGNED: u32 = 0;
pub const VI_ASSERT_IRQ1: u32 = 1;
pub const VI_ASSERT_IRQ2: u32 = 2;
pub const VI_ASSERT_IRQ3: u32 = 3;
pub const VI_ASSERT_IRQ4: u32 = 4;
pub const VI_ASSERT_IRQ5: u32 = 5;
pub const VI_ASSERT_IRQ6: u32 = 6;
pub const VI_ASSERT_IRQ7: u32 = 7;
pub const VI_UTIL_ASSERT_SYSRESET: u32 = 1;
pub const VI_UTIL_ASSERT_SYSFAIL: u32 = 2;
pub const VI_UTIL_DEASSERT_SYSFAIL: u32 = 3;
pub const VI_VXI_CLASS_MEMORY: u32 = 0;
pub const VI_VXI_CLASS_EXTENDED: u32 = 1;
pub const VI_VXI_CLASS_MESSAGE: u32 = 2;
pub const VI_VXI_CLASS_REGISTER: u32 = 3;
pub const VI_VXI_CLASS_OTHER: u32 = 4;
pub const VI_PXI_ADDR_NONE: u32 = 0;
pub const VI_PXI_ADDR_MEM: u32 = 1;
pub const VI_PXI_ADDR_IO: u32 = 2;
pub const VI_PXI_ADDR_CFG: u32 = 3;
pub const VI_TRIG_UNKNOWN: i32 = -1;
pub const VI_PXI_LBUS_UNKNOWN: i32 = -1;
pub const VI_PXI_LBUS_NONE: u32 = 0;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_0: u32 = 1000;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_1: u32 = 1001;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_2: u32 = 1002;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_3: u32 = 1003;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_4: u32 = 1004;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_5: u32 = 1005;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_6: u32 = 1006;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_7: u32 = 1007;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_8: u32 = 1008;
pub const VI_PXI_LBUS_STAR_TRIG_BUS_9: u32 = 1009;
pub const VI_PXI_STAR_TRIG_CONTROLLER: u32 = 1413;
pub const VI_ERROR_INV_SESSION: i32 = -1073807346;
pub const VI_INFINITE: u32 = 4294967295;
pub const VI_NORMAL: u32 = 1;
pub const VI_FDC: u32 = 2;
pub const VI_HS488: u32 = 3;
pub const VI_ASRL488: u32 = 4;
pub const VI_ASRL_IN_BUF: u32 = 16;
pub const VI_ASRL_OUT_BUF: u32 = 32;
pub const VI_ASRL_IN_BUF_DISCARD: u32 = 64;
pub const VI_ASRL_OUT_BUF_DISCARD: u32 = 128;
pub const VI_ERROR_HW_NGENUINE: i32 = -1073807190;
pub const VI_INTF_RIO: u32 = 8;
pub const VI_INTF_FIREWIRE: u32 = 9;
pub const VI_ATTR_SYNC_MXI_ALLOW_EN: u32 = 1073676641;
pub const VI_EVENT_VXI_DEV_CMD: u32 = 3221168143;
pub const VI_ATTR_VXI_DEV_CMD_TYPE: u32 = 1073692727;
pub const VI_ATTR_VXI_DEV_CMD_VALUE: u32 = 1073692728;
pub const VI_VXI_DEV_CMD_TYPE_16: u32 = 16;
pub const VI_VXI_DEV_CMD_TYPE_32: u32 = 32;
pub const VI_VXI_RESP_NONE: u32 = 0;
pub const VI_VXI_RESP_PROT_ERROR: i32 = -1;
pub const VI_ATTR_VXI_TRIG_LINES_EN: u32 = 1073692739;
pub const VI_ATTR_VXI_TRIG_DIR: u32 = 1073692740;
pub const VI_ATTR_ASRL_DISCARD_NULL: u32 = 1073676464;
pub const VI_ATTR_ASRL_CONNECTED: u32 = 1073676731;
pub const VI_ATTR_ASRL_BREAK_STATE: u32 = 1073676732;
pub const VI_ATTR_ASRL_BREAK_LEN: u32 = 1073676733;
pub const VI_ATTR_ASRL_ALLOW_TRANSMIT: u32 = 1073676734;
pub const VI_ATTR_ASRL_WIRE_MODE: u32 = 1073676735;
pub const VI_ASRL_WIRE_485_4: u32 = 0;
pub const VI_ASRL_WIRE_485_2_DTR_ECHO: u32 = 1;
pub const VI_ASRL_WIRE_485_2_DTR_CTRL: u32 = 2;
pub const VI_ASRL_WIRE_485_2_AUTO: u32 = 3;
pub const VI_ASRL_WIRE_232_DTE: u32 = 128;
pub const VI_ASRL_WIRE_232_DCE: u32 = 129;
pub const VI_ASRL_WIRE_232_AUTO: u32 = 130;
pub const VI_EVENT_ASRL_BREAK: u32 = 1073684515;
pub const VI_EVENT_ASRL_CTS: u32 = 1073684521;
pub const VI_EVENT_ASRL_DSR: u32 = 1073684522;
pub const VI_EVENT_ASRL_DCD: u32 = 1073684524;
pub const VI_EVENT_ASRL_RI: u32 = 1073684526;
pub const VI_EVENT_ASRL_CHAR: u32 = 1073684533;
pub const VI_EVENT_ASRL_TERMCHAR: u32 = 1073684516;
pub const VI_ATTR_FIREWIRE_DEST_UPPER_OFFSET: u32 = 1073676784;
pub const VI_ATTR_FIREWIRE_SRC_UPPER_OFFSET: u32 = 1073676785;
pub const VI_ATTR_FIREWIRE_WIN_UPPER_OFFSET: u32 = 1073676786;
pub const VI_ATTR_FIREWIRE_VENDOR_ID: u32 = 1073676787;
pub const VI_ATTR_FIREWIRE_LOWER_CHIP_ID: u32 = 1073676788;
pub const VI_ATTR_FIREWIRE_UPPER_CHIP_ID: u32 = 1073676789;
pub const VI_FIREWIRE_DFLT_SPACE: u32 = 5;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type ViUInt64 = u_int64_t;
pub type ViInt64 = i64;
pub type ViPUInt64 = *mut ViUInt64;
pub type ViAUInt64 = *mut ViUInt64;
pub type ViPInt64 = *mut ViInt64;
pub type ViAInt64 = *mut ViInt64;
pub type ViUInt32 = ::std::os::raw::c_uint;
pub type ViInt32 = ::std::os::raw::c_int;
pub type ViPUInt32 = *mut ViUInt32;
pub type ViAUInt32 = *mut ViUInt32;
pub type ViPInt32 = *mut ViInt32;
pub type ViAInt32 = *mut ViInt32;
pub type ViUInt16 = ::std::os::raw::c_ushort;
pub type ViPUInt16 = *mut ViUInt16;
pub type ViAUInt16 = *mut ViUInt16;
pub type ViInt16 = ::std::os::raw::c_short;
pub type ViPInt16 = *mut ViInt16;
pub type ViAInt16 = *mut ViInt16;
pub type ViUInt8 = ::std::os::raw::c_uchar;
pub type ViPUInt8 = *mut ViUInt8;
pub type ViAUInt8 = *mut ViUInt8;
pub type ViInt8 = ::std::os::raw::c_schar;
pub type ViPInt8 = *mut ViInt8;
pub type ViAInt8 = *mut ViInt8;
pub type ViChar = ::std::os::raw::c_char;
pub type ViPChar = *mut ViChar;
pub type ViAChar = *mut ViChar;
pub type ViByte = ::std::os::raw::c_uchar;
pub type ViPByte = *mut ViByte;
pub type ViAByte = *mut ViByte;
pub type ViAddr = *mut ::std::os::raw::c_void;
pub type ViPAddr = *mut ViAddr;
pub type ViAAddr = *mut ViAddr;
pub type ViReal32 = f32;
pub type ViPReal32 = *mut ViReal32;
pub type ViAReal32 = *mut ViReal32;
pub type ViReal64 = f64;
pub type ViPReal64 = *mut ViReal64;
pub type ViAReal64 = *mut ViReal64;
pub type ViBuf = ViPByte;
pub type ViConstBuf = *const ViByte;
pub type ViPBuf = ViPByte;
pub type ViABuf = *mut ViPByte;
pub type ViString = ViPChar;
pub type ViConstString = *const ViChar;
pub type ViPString = ViPChar;
pub type ViAString = *mut ViPChar;
pub type ViRsrc = ViString;
pub type ViConstRsrc = ViConstString;
pub type ViPRsrc = ViString;
pub type ViARsrc = *mut ViString;
pub type ViBoolean = ViUInt16;
pub type ViPBoolean = *mut ViBoolean;
pub type ViABoolean = *mut ViBoolean;
pub type ViStatus = ViInt32;
pub type ViPStatus = *mut ViStatus;
pub type ViAStatus = *mut ViStatus;
pub type ViVersion = ViUInt32;
pub type ViPVersion = *mut ViVersion;
pub type ViAVersion = *mut ViVersion;
pub type ViObject = ViUInt32;
pub type ViPObject = *mut ViObject;
pub type ViAObject = *mut ViObject;
pub type ViSession = ViObject;
pub type ViPSession = *mut ViSession;
pub type ViASession = *mut ViSession;
pub type ViAttr = ViUInt32;
pub type ViEvent = ViObject;
pub type ViPEvent = *mut ViEvent;
pub type ViFindList = ViObject;
pub type ViPFindList = *mut ViFindList;
pub type ViBusAddress = ViUInt64;
pub type ViBusSize = ViUInt64;
pub type ViAttrState = ViUInt64;
pub type ViBusAddress64 = ViUInt64;
pub type ViPBusAddress64 = *mut ViBusAddress64;
pub type ViEventType = ViUInt32;
pub type ViPEventType = *mut ViEventType;
pub type ViAEventType = *mut ViEventType;
pub type ViPAttrState = *mut ::std::os::raw::c_void;
pub type ViPAttr = *mut ViAttr;
pub type ViAAttr = *mut ViAttr;
pub type ViKeyId = ViString;
pub type ViConstKeyId = ViConstString;
pub type ViPKeyId = ViPString;
pub type ViJobId = ViUInt32;
pub type ViPJobId = *mut ViJobId;
pub type ViAccessMode = ViUInt32;
pub type ViPAccessMode = *mut ViAccessMode;
pub type ViPBusAddress = *mut ViBusAddress;
pub type ViEventFilter = ViUInt32;
pub type ViVAList = va_list;
pub type ViHndlr = ::std::option::Option<
    unsafe extern "C" fn(
        vi: ViSession,
        eventType: ViEventType,
        event: ViEvent,
        userHandle: ViAddr,
    ) -> ViStatus,
>;
unsafe extern "C" {
    pub fn viOpenDefaultRM(vi: ViPSession) -> ViStatus;
}
unsafe extern "C" {
    pub fn viFindRsrc(
        sesn: ViSession,
        expr: ViConstString,
        vi: ViPFindList,
        retCnt: ViPUInt32,
        desc: *mut ViChar,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viFindNext(vi: ViFindList, desc: *mut ViChar) -> ViStatus;
}
unsafe extern "C" {
    pub fn viParseRsrc(
        rmSesn: ViSession,
        rsrcName: ViConstRsrc,
        intfType: ViPUInt16,
        intfNum: ViPUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viParseRsrcEx(
        rmSesn: ViSession,
        rsrcName: ViConstRsrc,
        intfType: ViPUInt16,
        intfNum: ViPUInt16,
        rsrcClass: *mut ViChar,
        expandedUnaliasedName: *mut ViChar,
        aliasIfExists: *mut ViChar,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOpen(
        sesn: ViSession,
        name: ViConstRsrc,
        mode: ViAccessMode,
        timeout: ViUInt32,
        vi: ViPSession,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viClose(vi: ViObject) -> ViStatus;
}
unsafe extern "C" {
    pub fn viSetAttribute(vi: ViObject, attrName: ViAttr, attrValue: ViAttrState) -> ViStatus;
}
unsafe extern "C" {
    pub fn viGetAttribute(
        vi: ViObject,
        attrName: ViAttr,
        attrValue: *mut ::std::os::raw::c_void,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viStatusDesc(vi: ViObject, status: ViStatus, desc: *mut ViChar) -> ViStatus;
}
unsafe extern "C" {
    pub fn viTerminate(vi: ViObject, degree: ViUInt16, jobId: ViJobId) -> ViStatus;
}
unsafe extern "C" {
    pub fn viLock(
        vi: ViSession,
        lockType: ViAccessMode,
        timeout: ViUInt32,
        requestedKey: ViConstKeyId,
        accessKey: *mut ViChar,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viUnlock(vi: ViSession) -> ViStatus;
}
unsafe extern "C" {
    pub fn viEnableEvent(
        vi: ViSession,
        eventType: ViEventType,
        mechanism: ViUInt16,
        context: ViEventFilter,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viDisableEvent(vi: ViSession, eventType: ViEventType, mechanism: ViUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viDiscardEvents(vi: ViSession, eventType: ViEventType, mechanism: ViUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viWaitOnEvent(
        vi: ViSession,
        inEventType: ViEventType,
        timeout: ViUInt32,
        outEventType: ViPEventType,
        outContext: ViPEvent,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viInstallHandler(
        vi: ViSession,
        eventType: ViEventType,
        handler: ViHndlr,
        userHandle: ViAddr,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viUninstallHandler(
        vi: ViSession,
        eventType: ViEventType,
        handler: ViHndlr,
        userHandle: ViAddr,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viRead(vi: ViSession, buf: ViPBuf, cnt: ViUInt32, retCnt: ViPUInt32) -> ViStatus;
}
unsafe extern "C" {
    pub fn viReadAsync(vi: ViSession, buf: ViPBuf, cnt: ViUInt32, jobId: ViPJobId) -> ViStatus;
}
unsafe extern "C" {
    pub fn viReadToFile(
        vi: ViSession,
        filename: ViConstString,
        cnt: ViUInt32,
        retCnt: ViPUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viWrite(vi: ViSession, buf: ViConstBuf, cnt: ViUInt32, retCnt: ViPUInt32) -> ViStatus;
}
unsafe extern "C" {
    pub fn viWriteAsync(vi: ViSession, buf: ViConstBuf, cnt: ViUInt32, jobId: ViPJobId)
        -> ViStatus;
}
unsafe extern "C" {
    pub fn viWriteFromFile(
        vi: ViSession,
        filename: ViConstString,
        cnt: ViUInt32,
        retCnt: ViPUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viAssertTrigger(vi: ViSession, protocol: ViUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viReadSTB(vi: ViSession, status: ViPUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viClear(vi: ViSession) -> ViStatus;
}
unsafe extern "C" {
    pub fn viSetBuf(vi: ViSession, mask: ViUInt16, size: ViUInt32) -> ViStatus;
}
unsafe extern "C" {
    pub fn viFlush(vi: ViSession, mask: ViUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viBufWrite(vi: ViSession, buf: ViConstBuf, cnt: ViUInt32, retCnt: ViPUInt32)
        -> ViStatus;
}
unsafe extern "C" {
    pub fn viBufRead(vi: ViSession, buf: ViPBuf, cnt: ViUInt32, retCnt: ViPUInt32) -> ViStatus;
}
unsafe extern "C" {
    pub fn viPrintf(vi: ViSession, writeFmt: ViConstString, ...) -> ViStatus;
}
unsafe extern "C" {
    pub fn viVPrintf(
        vi: ViSession,
        writeFmt: ViConstString,
        params: *mut __va_list_tag,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viSPrintf(vi: ViSession, buf: ViPBuf, writeFmt: ViConstString, ...) -> ViStatus;
}
unsafe extern "C" {
    pub fn viVSPrintf(
        vi: ViSession,
        buf: ViPBuf,
        writeFmt: ViConstString,
        params: *mut __va_list_tag,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viScanf(vi: ViSession, readFmt: ViConstString, ...) -> ViStatus;
}
unsafe extern "C" {
    pub fn viVScanf(vi: ViSession, readFmt: ViConstString, params: *mut __va_list_tag) -> ViStatus;
}
unsafe extern "C" {
    pub fn viSScanf(vi: ViSession, buf: ViConstBuf, readFmt: ViConstString, ...) -> ViStatus;
}
unsafe extern "C" {
    pub fn viVSScanf(
        vi: ViSession,
        buf: ViConstBuf,
        readFmt: ViConstString,
        params: *mut __va_list_tag,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viQueryf(
        vi: ViSession,
        writeFmt: ViConstString,
        readFmt: ViConstString,
        ...
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viVQueryf(
        vi: ViSession,
        writeFmt: ViConstString,
        readFmt: ViConstString,
        params: *mut __va_list_tag,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viIn8(vi: ViSession, space: ViUInt16, offset: ViBusAddress, val8: ViPUInt8) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOut8(vi: ViSession, space: ViUInt16, offset: ViBusAddress, val8: ViUInt8) -> ViStatus;
}
unsafe extern "C" {
    pub fn viIn16(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        val16: ViPUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOut16(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        val16: ViUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viIn32(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        val32: ViPUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOut32(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        val32: ViUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viIn64(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        val64: ViPUInt64,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOut64(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        val64: ViUInt64,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viIn8Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        val8: ViPUInt8,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOut8Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        val8: ViUInt8,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viIn16Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        val16: ViPUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOut16Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        val16: ViUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viIn32Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        val32: ViPUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOut32Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        val32: ViUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viIn64Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        val64: ViPUInt64,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viOut64Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        val64: ViUInt64,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveIn8(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        length: ViBusSize,
        buf8: ViAUInt8,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveOut8(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        length: ViBusSize,
        buf8: ViAUInt8,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveIn16(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        length: ViBusSize,
        buf16: ViAUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveOut16(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        length: ViBusSize,
        buf16: ViAUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveIn32(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        length: ViBusSize,
        buf32: ViAUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveOut32(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        length: ViBusSize,
        buf32: ViAUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveIn64(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        length: ViBusSize,
        buf64: ViAUInt64,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveOut64(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress,
        length: ViBusSize,
        buf64: ViAUInt64,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveIn8Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        length: ViBusSize,
        buf8: ViAUInt8,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveOut8Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        length: ViBusSize,
        buf8: ViAUInt8,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveIn16Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        length: ViBusSize,
        buf16: ViAUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveOut16Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        length: ViBusSize,
        buf16: ViAUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveIn32Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        length: ViBusSize,
        buf32: ViAUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveOut32Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        length: ViBusSize,
        buf32: ViAUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveIn64Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        length: ViBusSize,
        buf64: ViAUInt64,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveOut64Ex(
        vi: ViSession,
        space: ViUInt16,
        offset: ViBusAddress64,
        length: ViBusSize,
        buf64: ViAUInt64,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMove(
        vi: ViSession,
        srcSpace: ViUInt16,
        srcOffset: ViBusAddress,
        srcWidth: ViUInt16,
        destSpace: ViUInt16,
        destOffset: ViBusAddress,
        destWidth: ViUInt16,
        srcLength: ViBusSize,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveAsync(
        vi: ViSession,
        srcSpace: ViUInt16,
        srcOffset: ViBusAddress,
        srcWidth: ViUInt16,
        destSpace: ViUInt16,
        destOffset: ViBusAddress,
        destWidth: ViUInt16,
        srcLength: ViBusSize,
        jobId: ViPJobId,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveEx(
        vi: ViSession,
        srcSpace: ViUInt16,
        srcOffset: ViBusAddress64,
        srcWidth: ViUInt16,
        destSpace: ViUInt16,
        destOffset: ViBusAddress64,
        destWidth: ViUInt16,
        srcLength: ViBusSize,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMoveAsyncEx(
        vi: ViSession,
        srcSpace: ViUInt16,
        srcOffset: ViBusAddress64,
        srcWidth: ViUInt16,
        destSpace: ViUInt16,
        destOffset: ViBusAddress64,
        destWidth: ViUInt16,
        srcLength: ViBusSize,
        jobId: ViPJobId,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMapAddress(
        vi: ViSession,
        mapSpace: ViUInt16,
        mapOffset: ViBusAddress,
        mapSize: ViBusSize,
        access: ViBoolean,
        suggested: ViAddr,
        address: ViPAddr,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viUnmapAddress(vi: ViSession) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMapAddressEx(
        vi: ViSession,
        mapSpace: ViUInt16,
        mapOffset: ViBusAddress64,
        mapSize: ViBusSize,
        access: ViBoolean,
        suggested: ViAddr,
        address: ViPAddr,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viPeek8(vi: ViSession, address: ViAddr, val8: ViPUInt8);
}
unsafe extern "C" {
    pub fn viPoke8(vi: ViSession, address: ViAddr, val8: ViUInt8);
}
unsafe extern "C" {
    pub fn viPeek16(vi: ViSession, address: ViAddr, val16: ViPUInt16);
}
unsafe extern "C" {
    pub fn viPoke16(vi: ViSession, address: ViAddr, val16: ViUInt16);
}
unsafe extern "C" {
    pub fn viPeek32(vi: ViSession, address: ViAddr, val32: ViPUInt32);
}
unsafe extern "C" {
    pub fn viPoke32(vi: ViSession, address: ViAddr, val32: ViUInt32);
}
unsafe extern "C" {
    pub fn viPeek64(vi: ViSession, address: ViAddr, val64: ViPUInt64);
}
unsafe extern "C" {
    pub fn viPoke64(vi: ViSession, address: ViAddr, val64: ViUInt64);
}
unsafe extern "C" {
    pub fn viMemAlloc(vi: ViSession, size: ViBusSize, offset: ViPBusAddress) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMemFree(vi: ViSession, offset: ViBusAddress) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMemAllocEx(vi: ViSession, size: ViBusSize, offset: ViPBusAddress64) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMemFreeEx(vi: ViSession, offset: ViBusAddress64) -> ViStatus;
}
unsafe extern "C" {
    pub fn viGpibControlREN(vi: ViSession, mode: ViUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viGpibControlATN(vi: ViSession, mode: ViUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viGpibSendIFC(vi: ViSession) -> ViStatus;
}
unsafe extern "C" {
    pub fn viGpibCommand(
        vi: ViSession,
        cmd: ViConstBuf,
        cnt: ViUInt32,
        retCnt: ViPUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viGpibPassControl(vi: ViSession, primAddr: ViUInt16, secAddr: ViUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viVxiCommandQuery(
        vi: ViSession,
        mode: ViUInt16,
        cmd: ViUInt32,
        response: ViPUInt32,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viAssertUtilSignal(vi: ViSession, line: ViUInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viAssertIntrSignal(vi: ViSession, mode: ViInt16, statusID: ViUInt32) -> ViStatus;
}
unsafe extern "C" {
    pub fn viMapTrigger(
        vi: ViSession,
        trigSrc: ViInt16,
        trigDest: ViInt16,
        mode: ViUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viUnmapTrigger(vi: ViSession, trigSrc: ViInt16, trigDest: ViInt16) -> ViStatus;
}
unsafe extern "C" {
    pub fn viUsbControlOut(
        vi: ViSession,
        bmRequestType: ViInt16,
        bRequest: ViInt16,
        wValue: ViUInt16,
        wIndex: ViUInt16,
        wLength: ViUInt16,
        buf: ViConstBuf,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viUsbControlIn(
        vi: ViSession,
        bmRequestType: ViInt16,
        bRequest: ViInt16,
        wValue: ViUInt16,
        wIndex: ViUInt16,
        wLength: ViUInt16,
        buf: ViPBuf,
        retCnt: ViPUInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viPxiReserveTriggers(
        vi: ViSession,
        cnt: ViInt16,
        trigBuses: ViAInt16,
        trigLines: ViAInt16,
        failureIndex: ViPInt16,
    ) -> ViStatus;
}
unsafe extern "C" {
    pub fn viVxiServantResponse(vi: ViSession, mode: ViInt16, resp: ViUInt32) -> ViStatus;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
